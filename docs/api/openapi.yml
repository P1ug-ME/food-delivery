openapi: 3.0.3
info:
  title: TTB Spark Food Delivery Order Service API
  description: |
    Comprehensive REST API for order management in the TTB Spark Food Delivery Platform.
    
    This service handles the complete order lifecycle from creation to completion,
    supporting cashless payments and inter-service communication patterns required
    for a microservices architecture.
    
    **Key Features:**
    - Order creation and processing
    - Status management with state machine validation
    - Customer and merchant order queries
    - Payment integration (Credit Card & Bank Transfer)
    - Inter-service communication via webhooks
    - Performance tested for 10,000+ orders/day
  version: 1.0.0
  contact:
    name: TTB Spark Development Team
    email: tawatchai.phe@ttbspark.com
  license:
    name: Private - TTB Spark Take Home Test

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.ttb-food-delivery.com
    description: Production server

tags:
  - name: Orders
    description: Order management operations
  - name: Webhooks
    description: Inter-service communication endpoints
  - name: Health
    description: System health and monitoring

paths:
  /api/orders:
    post:
      tags: [Orders]
      summary: Create new order
      description: Create a new food delivery order with payment processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            example:
              customerId: 1
              merchantId: 100
              paymentMethod: "CREDIT_CARD"
              deliveryAddress: "123 Sukhumvit Rd, Bangkok 10110"
              specialInstructions: "Please call when arrived"
              items:
                - menuItemId: 1
                  menuItemName: "Pad Thai"
                  quantity: 2
                  unitPrice: 120.00
                  notes: "Extra spicy"
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{orderNumber}:
    get:
      tags: [Orders]
      summary: Get order by number
      description: Retrieve order details by order number
      parameters:
        - name: orderNumber
          in: path
          required: true
          schema:
            type: string
          example: "TTB-123456789-ABC12345"
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found

  /api/orders/{orderNumber}/status:
    put:
      tags: [Orders]
      summary: Update order status
      description: Update the status of an existing order
      parameters:
        - name: orderNumber
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdateResponse'

  /api/orders/customer/{customerId}:
    get:
      tags: [Orders]
      summary: Get customer orders
      description: Retrieve paginated list of orders for a customer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Customer orders retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedOrderResponse'

  /api/webhooks/payment-status:
    post:
      tags: [Webhooks]
      summary: Payment status webhook
      description: Receive payment status updates from payment service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentStatusWebhook'
      responses:
        '200':
          description: Payment status processed successfully

  /actuator/health:
    get:
      tags: [Health]
      summary: Health check
      description: Check application health status
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"

components:
  schemas:
    CreateOrderRequest:
      type: object
      required: [customerId, merchantId, paymentMethod, deliveryAddress, items]
      properties:
        customerId:
          type: integer
          format: int64
          example: 1
        merchantId:
          type: integer
          format: int64
          example: 100
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, BANK_TRANSFER]
          example: "CREDIT_CARD"
        deliveryAddress:
          type: string
          example: "123 Sukhumvit Rd, Bangkok 10110"
        specialInstructions:
          type: string
          example: "Please call when arrived"
        items:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrderItemRequest'

    CreateOrderItemRequest:
      type: object
      required: [menuItemId, menuItemName, quantity, unitPrice]
      properties:
        menuItemId:
          type: integer
          format: int64
          example: 1
        menuItemName:
          type: string
          example: "Pad Thai"
        quantity:
          type: integer
          minimum: 1
          example: 2
        unitPrice:
          type: number
          format: decimal
          example: 120.00
        notes:
          type: string
          example: "Extra spicy"

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderNumber:
          type: string
          example: "TTB-123456789-ABC12345"
        customerId:
          type: integer
          format: int64
        merchantId:
          type: integer
          format: int64
        totalAmount:
          type: number
          format: decimal
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, BANK_TRANSFER]
        paymentStatus:
          type: string
          enum: [PENDING, COMPLETED